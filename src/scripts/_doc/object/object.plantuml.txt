@startuml
interface IObject {
    +active: boolean
    +position: Phaser.Math.Vector2
    +init(params: {}): void
    +update(time: number, delta: number): void
    +remove(): void
}

abstract class BaseObject extends Phaser.Physics.Matter.Sprite implements IObject {
    -_position: Phaser.Math.Vector2
    #isBodyAdded: boolean
    +position: Phaser.Math.Vector2
    +position: Phaser.Math.Vector2
    +setPosition(x?: number, y?: number, z?: number, w?: number): this
    +init(params: { cb?: (() => void) | undefined; }): void
    +remove(cb?: (() => void) | undefined): void
}

interface IEnemy extends IObject {
    +health: number
    +speed: number
    +path: Phaser.Curves.Path
    +pathT: number
    +effects: IEffect[]
    +init(params: { health: number; speed: number; path: Phaser.Curves.Path; gameStateStore: IGameStateStore; }): void
    +addEffect(effect: IEffect): void
}

class EnemyObject extends BaseObject implements IEnemy {
    +health: number
    -maxSpeed: number
    +speed: number
    +effects: IEffect[]
    +path: Phaser.Curves.Path
    +pathT: number
    -gameStateStore: IGameStateStore
    -healthBar: HealthBarObject
    +init(params: { health: number; speed: number; path: Phaser.Curves.Path; gameStateStore: IGameStateStore; cb?: (() => void) | undefined; }): void
    +addEffect(effect: IEffect): void
    +update(time: number, delta: number): void
    +remove(): void
}

class HealthBarObject {
    -scene: Phaser.Scene
    -healthBarBox: Phaser.GameObjects.Rectangle
    -healthBarBackground: Phaser.GameObjects.Rectangle
    -healthBarIndicator: Phaser.GameObjects.Rectangle
    -position: Phaser.Math.Vector2
    -width: number
    -height: number
    -padding: number
    -maxValue: number
    -currentValue: number
    -getValuePercentage(): number
    +init(position: Phaser.Math.Vector2, width: number, height: number, padding: number, maxValue: number, currentValue: number): void
    +update(position: Phaser.Math.Vector2, currentValue: number): void
    +remove(): void
}

interface IProjectile extends IObject {
    +init(params: { startPosition: Phaser.Math.Vector2; endPosition: Phaser.Math.Vector2; effects: IEffect[]; targets: IEnemy[]; }): void
}

abstract class BaseProjectile extends BaseObject implements IProjectile {
    #isRemoving: boolean
    #effects: IEffect[]
    #targets: IEnemy[]
    +init(params: { effects: IEffect[]; targets: IEnemy[]; cb?: (() => void) | undefined; }): void
    +update(time: number, delta: number, cb?: ((time: number, delta: number) => void) | undefined): void
    #checkOverlapAndApplyEffects(targets: IEnemy[]): void
    #shouldApplyEffects(enemy: IEnemy): boolean
    #applyEffects(enemy: IEnemy, cb?: ((enemy: IEnemy) => void) | undefined): void
    #startRemove(cb?: (() => void) | undefined): void
    +remove(cb?: (() => void) | undefined): void
}

class LaserObject extends BaseProjectile {
    -hitAnim: Phaser.GameObjects.Sprite
    +init(params: { startPosition: Phaser.Math.Vector2; endPosition: Phaser.Math.Vector2; effects: IEffect[]; targets: IEnemy[]; cb?: (() => void) | undefined; }): void
    +update(time: number, delta: number): void
    #applyEffects(enemy: IEnemy): void
    #startRemove(): void
    +remove(): void
}

interface IMovingProjectile extends IProjectile {
    +init(params: { startPosition: Phaser.Math.Vector2; endPosition: Phaser.Math.Vector2; speed: number; effects: IEffect[]; targets: IEnemy[]; }): void
}

abstract class BaseMovingProjectile extends BaseProjectile implements IMovingProjectile {
    #startPosition: Phaser.Math.Vector2
    #speed: number
    #dPosition: Phaser.Math.Vector2
    #maxDistance: number
    +init(params: { startPosition: Phaser.Math.Vector2; endPosition: Phaser.Math.Vector2; speed: number; effects: IEffect[]; targets: IEnemy[]; cb?: (() => void) | undefined; }): void
}

interface IAOEMovingProjectile extends IMovingProjectile {
    +init(params: { startPosition: Phaser.Math.Vector2; endPosition: Phaser.Math.Vector2; speed: number; effects: IEffect[]; targets: IEnemy[]; radius: number; }): void
}

class RocketObject extends BaseMovingProjectile implements IAOEMovingProjectile {
    -radius: number
    +init(params: { startPosition: Phaser.Math.Vector2; endPosition: Phaser.Math.Vector2; speed: number; effects: IEffect[]; targets: IEnemy[]; radius: number; cb?: (() => void) | undefined; }): void
    +update(time: number, delta: number): void
    #startRemove(): void
}

interface IPenetratingMovingProjectile extends IMovingProjectile {
    +init(params: { startPosition: Phaser.Math.Vector2; endPosition: Phaser.Math.Vector2; speed: number; effects: IEffect[]; targets: IEnemy[]; penetrationCount: number; }): void
}

abstract class BasePenetratingMovingProjectile extends BaseMovingProjectile implements IPenetratingMovingProjectile {
    #hitCount: number
    #enemiesAlreadyGotHit: IEnemy[]
    +init(params: { startPosition: Phaser.Math.Vector2; endPosition: Phaser.Math.Vector2; speed: number; effects: IEffect[]; targets: IEnemy[]; penetrationCount: number; cb?: (() => void) | undefined; }): void
    +update(time: number, delta: number): void
    #shouldApplyEffects(enemy: IEnemy): boolean
    #applyEffects(enemy: IEnemy): void
}

class BulletObject extends BasePenetratingMovingProjectile {
    +init(params: { startPosition: Phaser.Math.Vector2; endPosition: Phaser.Math.Vector2; speed: number; effects: IEffect[]; targets: IEnemy[]; penetrationCount: number; cb?: (() => void) | undefined; }): void
    #startRemove(): void
}

class EnergyBallBlueObject extends BasePenetratingMovingProjectile {
    #startRemove(): void
}

class EnergyBallOrangeObject extends BasePenetratingMovingProjectile {
    #startRemove(): void
}

interface ITurretObject extends IObject {
    +init(params: { position: Phaser.Math.Vector2; gameStateStore: IGameStateStore; ignoreUpdate?: boolean | undefined; }): void
    +showRange(): void
    +hideRange(): void
}

abstract class BaseTurretObject extends BaseObject implements ITurretObject {
    #ignoreUpdate: boolean
    #canShootAfterTimeMs: number
    #gameStateStore: IGameStateStore
    #radius: number
    #firerate: number
    #baseImage: Phaser.GameObjects.Image
    #rangeCircle: Phaser.GameObjects.Arc
    +init(params: { position: Phaser.Math.Vector2; gameStateStore: GameStateStore; ignoreUpdate?: boolean | undefined; cb?: (() => void) | undefined; }): void
    +showRange(): void
    +hideRange(): void
    #getEnemy(position: Phaser.Math.Vector2, distance: number): IEnemy | undefined
    #{abstract} addProjectile(enemy: IEnemy, angle: number): void
    #fire(): boolean
    +update(time: number, delta: number): void
    +remove(cb?: (() => void) | undefined): void
}

class TurretBulletMk1Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretBulletMk2Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretBulletMk3Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretEnergyBallBlueMk1Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretEnergyBallBlueMk2Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretEnergyBallBlueMk3Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretEnergyBallOrangeMk1Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretEnergyBallOrangeMk2Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretEnergyBallOrangeMk3Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretLaserMk1Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretLaserMk2Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretLaserMk3Object extends BaseTurretObject {
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretRocketMk1Object extends BaseTurretObject {
    -slotIndex: number
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretRocketMk2Object extends BaseTurretObject {
    -slotIndex: number
    #addProjectile(enemy: IEnemy, angle: number): void
}

class TurretRocketMk3Object extends BaseTurretObject {
    -slotIndex: number
    #addProjectile(enemy: IEnemy, angle: number): void
}
@enduml
