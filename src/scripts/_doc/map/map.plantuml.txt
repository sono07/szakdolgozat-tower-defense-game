@startuml
interface IMapGenerator {
    +generateMap(seed: string, gridHeight: number, gridWidth: number): { map: number[][]; path: Tuple<number, 2>[]; }
}

class MapGenerator implements IMapGenerator {
    -createGraph(tiles: number[][], p1: number[], p2: number[]): Graph
    -removeNodesFromGraph(graph: Graph, nodesToRemove: string[]): void
    -pointToPathString(point: [number, number]): string
    -pathStringToPoint(str: String): [number, number]
    -differenceToSide(value: [number, number]): 0 | 2 | 1 | 3
    +generateMap(seed: string, gridHeight: number, gridWidth: number): { map: number[][]; path: Tuple<number, 2>[]; }
}

interface IEnemySpawner {
    +waveNumberChangedCallback: ((waveNumber: number) => void)[]
    +waveEnemyNumberChangedCallback: ((enemyNumber: number) => void)[]
    +getWaveNumber(): number
    +getWaveEnemyNumber(): number
    +update(time: number, delta: number): void
}

class EnemySpawner implements IEnemySpawner {
    -gameStateStore: IGameStateStore
    -path: Phaser.Curves.Path
    -waveNumber: number
    -nextWaveTime: number
    -isWaveRunning: boolean
    -enemyDescriptions: EnemyDescription[]
    -nextEnemyIndex: number
    -nextEnemyTime: number
    -spawnedEnemies: (Phaser.GameObjects.Sprite & IEnemy)[]
    +waveNumberChangedCallback: ((waveNumber: number) => void)[]
    +waveEnemyNumberChangedCallback: ((enemyNumber: number) => void)[]
    +getWaveNumber(): number
    +getWaveEnemyNumber(): number
    -startNewWave(time: number): void
    -processWave(time: number): void
    +update(time: number, delta: number): void
}
@enduml
