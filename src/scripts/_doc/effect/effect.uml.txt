@startuml
interface IEffect {
	+ isDestroyed: boolean;
	+ update(time: number, delta: number, enemy: IEnemy): void;
}

abstract class BaseEffect implements IEffect {
	+ {abstract} totalDurationMs: number;
	+ elapsedDurationMs: number;
	+ isApplied: boolean;

	+ BaseEffect ();

	- create(enemy: IEnemy): void;
	# {abstract} _create(enemy: IEnemy): void;
	+ update(enemy: IEnemy, delta: number): void;
	# {abstract} _update(time: number, delta: number, enemy: IEnemy): void;
	+ destroy(enemy: IEnemy): void;
	# {abstract} _destroy(enemy: IEnemy): void;
}

abstract class BaseInstantEffect extends BaseEffect {
	# totalDurationMs: number;

	+ BaseInstantEffect ();

	# _update(time: number, delta: number, enemy: IEnemy): void;
	# _destroy(enemy: IEnemy): void;
}

class FlatDamageEffect extends BaseInstantEffect {
    - flatAmount: number;
	
    + FlatDamageEffect(flatAmount: number);

    # _create(enemy: IEnemy): void;
}

class PercentageDamageEffect extends BaseInstantEffect {
    - percentageAmount: number;

    + PercentageDamageEffect(percentageAmount: number);

    # _create(enemy: IEnemy): void;
}

abstract class BaseActiveEffect extends BaseEffect {
    # totalDurationMs: number;

    + BaseActiveEffect(totalDurationMs: number);
}

class FlatSlowEffect extends BaseActiveEffect {
    - flatAmount: number;

    +FlatSlowEffect(totalDurationMs: number, flatAmount: number);

    # _create(enemy: IEnemy): void;
    # _update(time: number, delta: number, enemy: IEnemy): void;
    # _destroy(enemy: IEnemy): void;
}

class PercentageSlowEffect extends BaseActiveEffect {
    - percentageAmount: number;
    - flatAmount: number;

    + PercentageSlowEffect(totalDurationMs: number, percentageAmount: number);

    # _create(enemy: IEnemy): void;
    # _update(time: number, delta: number, enemy: IEnemy): void;
    # _destroy(enemy: IEnemy): void;
}

abstract class BaseActiveOverTimeEffect extends BaseActiveEffect {
    - times: number;
    - tickCount: number;

    + BaseActiveOverTimeEffect(totalDurationMs: number, times: number);

    # _create(enemy: IEnemy): void;
    # _update(time: number, delta: number, enemy: IEnemy);
    # {abstract} tick(enemy: IEnemy): void;
    # _destroy(enemy: IEnemy): void;
}

class FlatFireEffect extends BaseActiveOverTimeEffect {
    - flatAmount: number;

    + FlatFireEffect(totalDurationMs: number, times: number, flatAmount: number);

	# tick(enemy: IEnemy);
}

class PercentageFireEffect extends BaseActiveOverTimeEffect {
    - percentageAmount: number;

    + PercentageFireEffect(totalDurationMs: number, times: number, percentageAmount: number);

    #  tick(enemy: IEnemy);
}
@enduml