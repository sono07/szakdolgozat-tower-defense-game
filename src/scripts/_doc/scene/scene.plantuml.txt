@startuml
interface IScene {
    +init(data: object): void
    +preload(): void
    +create(data: object): void
    +update(time: number, delta: number): void
}

abstract class BaseScene extends Phaser.Scene implements IScene {
    +{abstract} init(data: object): void
    +{abstract} preload(): void
    +{abstract} create(data: object): void
    +{abstract} update(time: number, delta: number): void
}

class BootScene extends BaseScene {
    +init(data: object): void
    +preload(): void
    +create(data: object): void
    +update(time: number, delta: number): void
}

class PrealoadScene extends BaseScene {
    -progressBar: Phaser.GameObjects.Graphics
    -progressBox: Phaser.GameObjects.Graphics
    -loadingText: Phaser.GameObjects.Text
    -percentageText: Phaser.GameObjects.Text
    -fileText: Phaser.GameObjects.Text
    -backgroundImage: Phaser.GameObjects.Image
    +init(data: object): void
    -updateLoadProgress(value: number): void
    -updateLoadFileProgress(file: any): void
    +preload(): void
    +create(data: object): void
    +update(time: number, delta: number): void
}

class MainMenuScene extends BaseScene {
    -backgroundImage: Phaser.GameObjects.Image
    -mapText: Phaser.GameObjects.Text
    -seedContainer: Phaser.GameObjects.DOMElement
    -playText: Phaser.GameObjects.Text
    -playBox: Phaser.GameObjects.Rectangle
    +init(data: object): void
    +preload(): void
    +create(data: object): void
    +update(time: number, delta: number): void
}

class GameScene extends BaseScene {
    -gameStateStore: IGameStateStore
    -tileMap: Phaser.Tilemaps.Tilemap
    -tileMapLayer: Phaser.Tilemaps.TilemapLayer
    -tileSelector: Phaser.GameObjects.Rectangle
    -priceText: Phaser.GameObjects.Text
    +init(data: object): void
    +preload(): void
    +create(data: { seed: string; }): void
    +update(time: number, delta: number): void
    -getWindowSizes(): WindowSizes
    -createMapTiles(map: number[][], windowSizes: WindowSizes): void
    -getConvertedPath(path: [number, number][], windowSizes: WindowSizes): Phaser.Curves.Path
    -createMapTileSelector(windowSizes: WindowSizes): void
    -createMapGrid(windowSizes: WindowSizes): void
    -createTopUI(): void
    -createSideUI(): void
    -createUIInputHandlers(): void
    -formatPrice(price: number): string
}

class GameOverScene extends BaseScene {
    -backgroundImage: Phaser.GameObjects.Image
    -gameOverText: Phaser.GameObjects.Text
    -scoreText: Phaser.GameObjects.Text
    -backText: Phaser.GameObjects.Text
    -backBox: Phaser.GameObjects.Rectangle
    +init(data: object): void
    +preload(): void
    +create(data: { score: number; }): void
    +update(time: number, delta: number): void
}
@enduml
