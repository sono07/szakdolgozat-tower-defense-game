@startuml
interface IEffect extends ICloneable {
    +isDestroyed: boolean
    +update(time: number, delta: number, enemy: IEnemy): void
}

abstract class BaseEffect extends BaseCloneable implements IEffect {
    #{abstract} totalDurationMs: number
    #elapsedDurationMs: number
    #isApplied: boolean
    +isDestroyed: boolean
    #init(enemy: IEnemy, cb?: ((enemy: IEnemy) => void) | undefined): void
    +update(time: number, delta: number, enemy: IEnemy, cb?: ((time: number, delta: number, enemy: IEnemy) => void) | undefined): void
    #remove(enemy: IEnemy, cb?: ((enemy: IEnemy) => void) | undefined): void
    +copy(o: this): this
}

abstract class BaseActiveEffect extends BaseEffect {
    #totalDurationMs: number
    +copy(o: this): this
}

abstract class BaseActiveOverTimeEffect extends BaseActiveEffect {
    -times: number
    -tickCount: number
    +update(time: number, delta: number, enemy: IEnemy): void
    #{abstract} tick(enemy: IEnemy): void
    +copy(o: this): this
}

class FlatFireEffect extends BaseActiveOverTimeEffect {
    -flatAmount: number
    #tick(enemy: IEnemy): void
    +copy(o: this): this
}

class FlatSlowEffect extends BaseActiveEffect {
    -flatAmount: number
    #init(enemy: IEnemy): void
    #remove(enemy: IEnemy): void
    +copy(o: this): this
}

abstract class BaseInstantEffect extends BaseEffect {
    #totalDurationMs: number
    +copy(o: this): this
}

class FlatDamageEffect extends BaseInstantEffect {
    -flatAmount: number
    #init(enemy: IEnemy): void
    +copy(o: this): this
}

class PercentageDamageEffect extends BaseInstantEffect {
    -percentageAmount: number
    #init(enemy: IEnemy): void
    +copy(o: this): this
}
@enduml
